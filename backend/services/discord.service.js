import dotenv from 'dotenv';
dotenv.config();

/**
 * Send a Discord notification with embed
 * @param {Object} embed - The embed object to send
 * @returns {Promise<boolean>} - Success status
 */
async function sendDiscordEmbed(embed) {
  const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;

  console.log('üîç Discord service called:', {
    webhookConfigured: !!DISCORD_WEBHOOK_URL,
    embedTitle: embed.title,
    timestamp: new Date().toISOString()
  });

  if (!DISCORD_WEBHOOK_URL) {
    console.warn('‚ùå Discord webhook URL not configured');
    return false;
  }

  try {
    console.log('üì§ Sending Discord notification...');
    const response = await fetch(DISCORD_WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        embeds: [embed],
        username: 'JourneyAI Bot'
      })
    });

    if (response.ok) {
      console.log('‚úÖ Discord notification sent successfully');
      return true;
    } else {
      console.error('‚ùå Failed to send Discord notification:', response.status, response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Error sending Discord notification:', error);
    return false;
  }
}

/**
 * Send a notification when someone visits the website
 */
export async function notifyWebsiteVisit(visitorInfo = {}) {
  const { timestamp } = visitorInfo;
  
  await sendDiscordEmbed({
    title: 'üåç New Website Visit!',
    color: 0x7C3AED,
    fields: [{
      name: 'Time',
      value: timestamp || new Date().toLocaleString(),
      inline: true
    }],
    footer: { text: 'JourneyAI Analytics' },
    timestamp: new Date().toISOString()
  });
}

/**
 * Send a notification when someone generates an itinerary
 */
export async function notifyItineraryGeneration(tripInfo) {
  const { 
    destination, startDate, endDate, travelers, budget, 
    userEmail, from, interests = []
  } = tripInfo;

  const duration = startDate && endDate 
    ? Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24))
    : 'Unknown';

  const fields = [
    { name: 'Destination', value: destination || 'Not specified', inline: true },
    { name: 'From', value: from ? (typeof from === 'object' ? from.full || from.city : from) : 'Not specified', inline: true },
    { name: 'Duration', value: `${duration} days`, inline: true },
    { name: 'Travelers', value: travelers || 'Not specified', inline: true },
    { name: 'Budget', value: budget || 'Not specified', inline: true }
  ];

  if (startDate && endDate) {
    fields.push({
      name: 'Travel Dates',
      value: `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`,
      inline: true
    });
  }

  if (interests.length > 0) {
    fields.push({
      name: 'Interests',
      value: interests.join(', '),
      inline: false
    });
  }

  await sendDiscordEmbed({
    title: '‚úàÔ∏è New Itinerary Generated!',
    color: 0x10B981,
    fields,
    footer: { text: `Generated by ${userEmail || 'Anonymous User'}` },
    timestamp: new Date().toISOString()
  });
}

/**
 * Send a notification when a user signs up
 */
export async function notifyUserSignup(userInfo) {
  const { email, name, location } = userInfo;

  const fields = [
    { name: 'Email', value: email || 'Not provided', inline: true },
    { name: 'Name', value: name || 'Not provided', inline: true },
    { name: 'Signup Time', value: new Date().toLocaleString(), inline: true }
  ];

  if (location) {
    fields.push({
      name: 'Location',
      value: typeof location === 'object' ? location.full || location.city : location,
      inline: true
    });
  }

  await sendDiscordEmbed({
    title: 'üëã New User Signup!',
    color: 0x3B82F6,
    fields,
    footer: { text: 'JourneyAI User Management' },
    timestamp: new Date().toISOString()
  });
}
